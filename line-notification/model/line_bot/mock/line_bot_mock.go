// Code generated by MockGen. DO NOT EDIT.
// Source: line-notification/model/line_bot/line_bot.go

// Package mock_line_bot is a generated GoMock package.
package mock_line_bot

import (
	line_bot "line-notification/model/line_bot"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	linebot "github.com/line/line-bot-sdk-go/v7/linebot"
)

// MockLineBroadcastMessageCall is a mock of LineBroadcastMessageCall interface.
type MockLineBroadcastMessageCall struct {
	ctrl     *gomock.Controller
	recorder *MockLineBroadcastMessageCallMockRecorder
}

// MockLineBroadcastMessageCallMockRecorder is the mock recorder for MockLineBroadcastMessageCall.
type MockLineBroadcastMessageCallMockRecorder struct {
	mock *MockLineBroadcastMessageCall
}

// NewMockLineBroadcastMessageCall creates a new mock instance.
func NewMockLineBroadcastMessageCall(ctrl *gomock.Controller) *MockLineBroadcastMessageCall {
	mock := &MockLineBroadcastMessageCall{ctrl: ctrl}
	mock.recorder = &MockLineBroadcastMessageCallMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineBroadcastMessageCall) EXPECT() *MockLineBroadcastMessageCallMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockLineBroadcastMessageCall) Do() (*linebot.BasicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do")
	ret0, _ := ret[0].(*linebot.BasicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockLineBroadcastMessageCallMockRecorder) Do() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockLineBroadcastMessageCall)(nil).Do))
}

// MockLineClient is a mock of LineClient interface.
type MockLineClient struct {
	ctrl     *gomock.Controller
	recorder *MockLineClientMockRecorder
}

// MockLineClientMockRecorder is the mock recorder for MockLineClient.
type MockLineClientMockRecorder struct {
	mock *MockLineClient
}

// NewMockLineClient creates a new mock instance.
func NewMockLineClient(ctrl *gomock.Controller) *MockLineClient {
	mock := &MockLineClient{ctrl: ctrl}
	mock.recorder = &MockLineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLineClient) EXPECT() *MockLineClientMockRecorder {
	return m.recorder
}

// BroadcastMessage mocks base method.
func (m *MockLineClient) BroadcastMessage(message linebot.SendingMessage) line_bot.LineBroadcastMessageCall {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BroadcastMessage", message)
	ret0, _ := ret[0].(line_bot.LineBroadcastMessageCall)
	return ret0
}

// BroadcastMessage indicates an expected call of BroadcastMessage.
func (mr *MockLineClientMockRecorder) BroadcastMessage(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BroadcastMessage", reflect.TypeOf((*MockLineClient)(nil).BroadcastMessage), message)
}
